" Vim main configuration file
" vim: cc=100

" Enable plugins with tpope's pathogen
execute pathogen#infect()

" Generate helptags for our plugins
execute pathogen#helptags()

" Enable filetype detection for plugins and indentation
filetype plugin indent on

" Enable syntax highlighting
syntax enable

" Jump to the buffer we just opened with fzf (:Buffers, :Windows, etc..)
let g:fzf_buffers_jump = 1

" Leader is used for personal shortcuts
let mapleader = "\<space>"

" If problems with regexes & vim-javascript, uncomment below
" set regexpengine=1

" Make YCM compatible with UltiSnips (using supertab)
" let g:ycm_auto_trigger = 0
" let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

" UltiSnips keymap
" let g:UltiSnipsExpandTrigger = "<tab>"
" let g:UltiSnipsJumpForwardTrigger = "<tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Save swap/backup files in centralized folder
set backupdir^=$HOME/.vim/backup//
set directory^=$HOME/.vim/swap//

"set background=dark
"let g:solarized_termcolors=256
colorscheme hybrid

" Open man pages in vim and bind K to split them
runtime ftplugin/man.vim
nnoremap K :Man <cword><cr><c-w>L

" C syntastic config
"let g:syntastic_c_compiler = 'clang'
"let g:syntastic_c_compiler_options = '-Wall -Wextra'
"let g:syntastic_c_include_dirs = ['libft/inc', 'inc', 'includes']
"let g:syntastic_c_check_header = '1'
"let g:syntastic_html_tidy_exec = 'tidy5'

" Cpp syntastic config
"let g:syntastic_cpp_compiler = 'clang++'
"let g:syntastic_cpp_compiler_options = '-Wall -Wextra -std=c++11'
"let g:syntastic_cpp_include_dirs = ['libft/inc', 'inc', 'includes']

" Javascript syntastic config
"let g:syntastic_javascript_checkers = ['eslint']

" Asm syntastic config
"let g:syntastic_asm_compiler = "nasm"

" Speed up redraw while executing macros (mostly)
set lazyredraw

" Ignore whitespaces in vimdiff
set diffopt+=iwhite

" Enable mouse support
set mouse+=a

"set foldcolumn=4
set foldmethod=syntax
set foldlevelstart=5

" Set correct encoding
set encoding=utf8

" Fix backspace weird default behaviour
set backspace=indent,eol,start

" Hide buffers so that we don't need to close them before switching to another
set hidden

" Show invisible characters (tabs and eol)
set list
set listchars=tab:·\ ,eol:¬

" Tabulation settings
set tabstop=4		" <tab> is 4 spaces large
set softtabstop=4	" <tab> in i mode is 4 spaces large (mixed spaces and tab)
set shiftwidth=4	" Indent with 4 spaces
set smarttab		" Intelligent <tab> insertion

" Fix supertab <Tab> default behaviour (correct top to bottom cycle)
let g:SuperTabDefaultCompletionType = '<C-n>'

" Search settings
set ignorecase		" Ignore case most of the time..
set smartcase		" ..unless we use capital letters
set incsearch		" Search as soon as we type
set hlsearch		" Highlight search results

" Quickly disable highlighting
nnoremap <leader>/ :nohlsearch<cr>

" Go to next result and center buffer
nnoremap n nzzzv

" Go to prev result and center buffer
nnoremap N Nzzzv

" Misc settings
set number							" Display line number
set autoindent						" Keep same indent on newline
set cindent							" Use C-style indentation
set laststatus=2					" Always show status line
set statusline=%f\ -\ %y%=%r\ %l/%L[%c]\ %m
set cursorline						" Display current line
set showmatch						" Display matching braces
set showcmd							" Show commands as you type them
set showmode						" Always show the current mode
set wildmenu						" Show more results on <tab>
set wildmode=list:longest,full		" Show them all
set splitbelow						" Force new windows to open below..
set splitright						" .. on the right

" Fix some filetype detection
autocmd BufNewFile,BufReadPost *.h setlocal filetype=c
autocmd BufWritePost,BufReadPost *.tpp setlocal filetype=cpp
autocmd BufNewFile,BufReadPost *.md setlocal filetype=markdown

" Hit <esc> quicker (best vim shortcut ever)
inoremap jk <esc>
snoremap jk <esc>

" Navigate through wrapped lines
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Navigate through tabs
nnoremap <c-h> :tabprevious<cr>
nnoremap <c-l> :tabnext<cr>

" Navigate through splits
nnoremap <space>l <c-w>l
nnoremap <space>h <c-w>h
nnoremap <space>j <c-w>j
nnoremap <space>k <c-w>k

" NERDTree config
let g:NERDTreeWinSize=19
let NERDTreeIgnore=['\.o$']
nnoremap <leader>n :NERDTreeFocus<cr>

" Quickly edit vimrc
nnoremap <leader>vi :vs ~/.vim/vimrc<cr>

" Save / close buffers
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>

" Add ; at the end of the line quickly
nnoremap ;; maA;<esc>`a

" Shell like shortcuts
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Toggle split recursively
nnoremap z<space> zA

" Split line (opposite of J)
nnoremap S mzi<cr><esc>`z

" Grep in current folder using the-silver-searcher (ag)
" command! -bang -nargs=* Ag
" 	\ call fzf#vim#ag(<q-args>,
" 	\ <bang>0
" 	\   ? fzf#vim#with_preview({'options': '--delimiter=: --nth 4..'}, 'up:60%')
" 	\   : fzf#vim#with_preview({'options': '--delimiter=: --nth 4..'}, 'right:50%:hidden', '?'),
" 	\ <bang>0)

" Binding for the Ag command
nnoremap <leader>f :Ag<cr>

" Override Files command to have preview window
" command! -bang -nargs=? -complete=dir Files
"   \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" Binding for the Files command
nnoremap <leader>e :Files<cr>

" Quickly switch between windows/buffers 
nnoremap <leader>o :Windows<cr>
nnoremap <leader>b :Buffers<cr>

" Binding for vim-dispatch Make command
nnoremap <F5> :Make<cr>

" Open quickfix window in a full-width horizontal split
nnoremap <F6> :botright :Copen<cr>

" Open terminal window in a new vertical split
nnoremap <F9> :vertical rightbelow :terminal<cr><c-w>L
