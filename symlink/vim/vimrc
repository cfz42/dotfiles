" Set correct runtimepath
set nocompatible
execute pathogen#infect()
execute pathogen#helptags()
filetype plugin indent on 			" Load file specific plugins/indent settings

if has("mouse_sgr")
	set ttymouse=sgr
end

" If problems with regexes in vim-javascript, uncomment below
" set regexpengine=1

" Ultisnip keymap
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Vim leader/localleader
let mapleader = "\<space>"					" Main shortcuts
"let localleader=' '					" Localleader to avoid conflicts

" Enable syntax highlighting
syntax enable

set background=dark
"let g:solarized_termcolors=256
"colorscheme solarized
colorscheme hybrid

highlight VertSplit   ctermbg=bg
highlight Folded      term=none cterm=none
"highlight SpecialKey  ctermbg=bg
" highlight ColorColumn term=reverse cterm=reverse ctermfg=12 ctermbg=7 gui=reverse

" Open man pages in vim and bind K to split them
runtime ftplugin/man.vim
nnoremap K :Man <cword><cr><c-w>L

" C syntastic config
let g:syntastic_c_compiler = 'clang'
let g:syntastic_c_compiler_options = '-Wall -Wextra'
let g:syntastic_c_include_dirs = ['libft/inc', 'inc', 'includes']
let g:syntastic_c_check_header = '1'
"let g:syntastic_cpp_check_header = 1
"let g:syntastic_html_tidy_exec = 'tidy5'

" Javascript syntastic config
let g:syntastic_javascript_checkers = ['eslint']

" Asm syntastic config
let g:syntastic_asm_compiler = "nasm"

" ignore whitespaces in vimdiff
set diffopt+=iwhite

set mouse+=a

set foldcolumn=4
set foldmethod=syntax
set foldlevelstart=5

set pastetoggle=<F2>				" Quickly paste huge buffers
set encoding=utf8					" Set correct encoding
set backspace=indent,eol,start		" Fix backspace
set hidden							" Allow to hide buffer instead of closing it

set list
"set listchars=tab:▸‑,eol:¬
set listchars=tab:▸\ ,eol:¬
set showbreak=↪

set tabstop=4						" <tab> is 4 spaces large
set softtabstop=4					" <tab> in i mode is 4 spaces large (mixed spaces and tab)
set shiftwidth=4					" Indent with 4 spaces
set smarttab						" Intelligent <tab> insertion

set ignorecase
set smartcase
set incsearch						" Search as soon as we type
set hlsearch

nnoremap n nzzzv
nnoremap N Nzzzv

set autoindent						" Keep same indent on newline
set cindent							" Use C-style indentation
set number							" Display line number 
set rnu								" Display relative num (except current line in vim >= 7.4)
set laststatus=2					" Always show status line
set statusline=%t\ -\ %y%=%r\ %l/%L[%c]\ %{SyntasticStatuslineFlag()}%m
set cursorline						" Display current line
set showmatch						" Display matching braces
set showcmd							" Show commands as you type them
set showmode						" Always show the current mode
set wildmenu						" Show more results on <tab>
set wildmode=list:longest,full		" Show them all
set splitbelow						" Force new windows to open below..
set splitright						" .. on the right

" Do not set .h files as cpp
autocmd BufNewFile,BufReadPost *.h setlocal filetype=c
autocmd BufWritePost,BufReadPost *.tpp setlocal filetype=cpp
autocmd BufNewFile,BufReadPost *.md setlocal filetype=markdown

autocmd FileType c setlocal colorcolumn=80
autocmd FileType help,man wincmd L					" Display man/help pages in a split

" Enter command mode
nnoremap <leader> :

" Hit <esc> quicker
inoremap jk <esc>
snoremap jk <esc>

" Mapping to disable highlighting
nnoremap <leader>/ :nohlsearch<cr>

" Navigate through wrapped lines
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Browse buffers
nnoremap <c-up> :bnext<cr>
nnoremap <c-right> :bnext<cr>
nnoremap <c-down> :bprev<cr>
nnoremap <c-left> :bprev<cr>

" Close buffer
nnoremap <leader>d :bdel<cr>

" Navigate through tabs
nnoremap <c-h> :tabnext<cr>
nnoremap <c-l> :tabprevious<cr>
nnoremap <c-e> :tabedit

"Navigate through splits
nnoremap <space>l <c-w>l
nnoremap <space>h <c-w>h
nnoremap <space>j <c-w>j
nnoremap <space>k <c-w>k

" Quick access to NERDTree
let NERDTreeIgnore=['\.o$']
nnoremap <leader>b :NERDTreeToggle<cr>
nnoremap <leader>f :NERDTreeFocus<cr>


" Quickly edit vimrc
nnoremap <leader>ev :vs ~/.vim/vimrc<cr>

" Quickly edit snippets
nnoremap <leader>sni :vs ~/.vim/bundle/vim-snippets/snippets<cr>

" Save / Close files
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>

" Add ; quickly
nnoremap <leader>; A;<esc>

inoremap <C-a> <esc>I
inoremap <C-e> <esc>A
cnoremap <C-a> <home>
cnoremap <C-e> <end>

nnoremap z<space> zA

nnoremap S mzi<cr><esc>`z
